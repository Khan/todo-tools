#!/usr/bin/python

"""
 _____ ___  ____   ___    _____           _
|_   _/ _ \|  _ \ / _ \  |_   _|__   ___ | |___
  | || | | | | | | | | |   | |/ _ \ / _ \| / __|
  | || |_| | |_| | |_| |   | | (_) | (_) | \__ \
  |_| \___/|____/ \___/    |_|\___/ \___/|_|___/

"""

from __future__ import print_function

import argparse
import os
import stat
import re
import sys
import shutil

# python2 compat
if sys.version_info[0] == 2:
    from future.builtins.misc import input

import todo_tools


def main():
    args = get_args()

    if args.clear_todos:
        sure = input("Are you sure you want to clear todo file? (y/N) ").lower()
        if sure == 'y':
            open(args.file, 'w').close()
    elif args.check:
        todo_tools.run_as_checker(args)
    elif args.install_dir == []:
        sys.stdin = open('/dev/tty')
        todo_tools.run_as_hook(args.file)
    else:
        for install in [x for x in args.install_dir
                        if os.path.isdir(os.path.join(x, '.git'))]:
            hookfilename = os.path.join(install, '.git/hooks/post-commit')
            already_installed = False
            if os.path.isfile(hookfilename):
                with open(hookfilename, 'r') as hookfile:
                    for line in hookfile.readlines():
                        if re.search('todo', line):
                            already_installed = True
            else:
                already_installed = False
            if not already_installed:
                with open(hookfilename, 'a') as hookfile:
                    hookfile.write('#!/bin/bash\n\ntodo\n')

            # https://stackoverflow.com/questions/12791997/how-do-you-do-a-simple-chmod-x-from-within-python
            # TL;DR chmod +x hookfile
            st = os.stat(hookfilename)
            os.chmod(hookfilename, st.st_mode | stat.S_IEXEC)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('install_dir', metavar='D', type=str, nargs='*', default=None,
                        help=('Install post-commit hook to git repositor(y|ies).'))
    parser.add_argument('-f', '--file', type=str,
                        default=os.path.join(os.path.expanduser('~/.todo')),
                        help=('What file to use as our todo file.'))
    parser.add_argument('-c', '--check', action='store_true', default=False,
                        help=('Check outstanding TODOs and alert '
                              'if any are overdue'))
    parser.add_argument('--clear-todos', action='store_true', default=False,
                        help='Clear TODO file. Warning, cannot be undone.')
    args = parser.parse_args()
    # create the todo file if it doesn't exist
    args.file = os.path.abspath(args.file)
    if not os.path.isfile(args.file):
        open(args.file, 'w').close()
    return args


if __name__ == '__main__':
    sys.exit(main())
